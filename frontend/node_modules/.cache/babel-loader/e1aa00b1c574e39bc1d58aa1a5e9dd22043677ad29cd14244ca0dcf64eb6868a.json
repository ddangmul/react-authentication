{"ast":null,"code":"var _jsxFileName = \"/Users/jeong-eungyeong/Desktop/\\u1100\\u1162\\u1107\\u1161\\u11AF/react/udemy/22. \\u1105\\u1175\\u110B\\u1162\\u11A8\\u1110\\u1173\\u110B\\u1162\\u11B8 \\u110B\\u1175\\u11AB\\u110C\\u1173\\u11BC/frontend/src/pages/Authentication.js\";\nimport { redirect } from \"react-router-dom\";\nimport AuthForm from \"../components/AuthForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AuthenticationPage() {\n  return /*#__PURE__*/_jsxDEV(AuthForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 10\n  }, this);\n}\n_c = AuthenticationPage;\nexport default AuthenticationPage;\n\n// AuthForm이 제출될 때마다 트리거될 작업 정의\nexport async function action({\n  request\n}) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\";\n  if (mode !== \"login\" && mode !== \"signup\") {\n    throw new Response(JSON.stringify({\n      message: \"Unsupported mode.\"\n    }), {\n      status: 422\n    });\n  }\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\")\n  };\n  const response = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(authData)\n  });\n  console.log(authData);\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n  if (!response.ok) {\n    throw new Response(JSON.stringify({\n      message: \"Could not authenticatie user.\"\n    }), {\n      status: 500\n    });\n  }\n  // 토큰 추출\n  const resData = await response.json();\n  const token = resData.token;\n\n  // 로컬스토리지에 저장\n  localStorage.setItem(\"token\", token);\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 1);\n  localStorage.setItem('expiration', expiration.toISO);\n\n  // soon: manage that token\n  return redirect(\"/\");\n}\nvar _c;\n$RefreshReg$(_c, \"AuthenticationPage\");","map":{"version":3,"names":["redirect","AuthForm","jsxDEV","_jsxDEV","AuthenticationPage","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","request","searchParams","URL","url","mode","get","Response","JSON","stringify","message","status","data","formData","authData","email","password","response","fetch","method","headers","body","console","log","ok","resData","json","token","localStorage","setItem","expiration","Date","setHours","getHours","toISO","$RefreshReg$"],"sources":["/Users/jeong-eungyeong/Desktop/개발/react/udemy/22. 리액트앱 인증/frontend/src/pages/Authentication.js"],"sourcesContent":["import { redirect } from \"react-router-dom\";\n\nimport AuthForm from \"../components/AuthForm\";\n\nfunction AuthenticationPage() {\n  return <AuthForm />;\n}\n\nexport default AuthenticationPage;\n\n// AuthForm이 제출될 때마다 트리거될 작업 정의\nexport async function action({ request }) {\n  const searchParams = new URL(request.url).searchParams;\n  const mode = searchParams.get(\"mode\") || \"login\";\n\n  if (mode !== \"login\" && mode !== \"signup\") {\n    throw new Response(JSON.stringify({ message: \"Unsupported mode.\" }), {\n      status: 422,\n    });\n  }\n\n  const data = await request.formData();\n  const authData = {\n    email: data.get(\"email\"),\n    password: data.get(\"password\"),\n  };\n\n  const response = await fetch(\"http://localhost:8080/\" + mode, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(authData),\n  });\n\n  console.log(authData);\n\n  if (response.status === 422 || response.status === 401) {\n    return response;\n  }\n\n  if (!response.ok) {\n    throw new Response(\n      JSON.stringify({ message: \"Could not authenticatie user.\" }),\n      { status: 500 }\n    );\n  }\n  // 토큰 추출\n  const resData = await response.json();\n  const token = resData.token;\n\n  // 로컬스토리지에 저장\n  localStorage.setItem(\"token\", token);\n  const expiration = new Date();\n  expiration.setHours(expiration.getHours() + 1);\n  localStorage.setItem('expiration', expiration.toISO)\n\n  // soon: manage that token\n  return redirect(\"/\");\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,kBAAkB;AAE3C,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,SAASC,kBAAkBA,CAAA,EAAG;EAC5B,oBAAOD,OAAA,CAACF,QAAQ;IAAAI,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB;AAACC,EAAA,GAFQL,kBAAkB;AAI3B,eAAeA,kBAAkB;;AAEjC;AACA,OAAO,eAAeM,MAAMA,CAAC;EAAEC;AAAQ,CAAC,EAAE;EACxC,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAACF,OAAO,CAACG,GAAG,CAAC,CAACF,YAAY;EACtD,MAAMG,IAAI,GAAGH,YAAY,CAACI,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO;EAEhD,IAAID,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,QAAQ,EAAE;IACzC,MAAM,IAAIE,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAoB,CAAC,CAAC,EAAE;MACnEC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,MAAMC,IAAI,GAAG,MAAMX,OAAO,CAACY,QAAQ,CAAC,CAAC;EACrC,MAAMC,QAAQ,GAAG;IACfC,KAAK,EAAEH,IAAI,CAACN,GAAG,CAAC,OAAO,CAAC;IACxBU,QAAQ,EAAEJ,IAAI,CAACN,GAAG,CAAC,UAAU;EAC/B,CAAC;EAED,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,GAAGb,IAAI,EAAE;IAC5Dc,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEb,IAAI,CAACC,SAAS,CAACK,QAAQ;EAC/B,CAAC,CAAC;EAEFQ,OAAO,CAACC,GAAG,CAACT,QAAQ,CAAC;EAErB,IAAIG,QAAQ,CAACN,MAAM,KAAK,GAAG,IAAIM,QAAQ,CAACN,MAAM,KAAK,GAAG,EAAE;IACtD,OAAOM,QAAQ;EACjB;EAEA,IAAI,CAACA,QAAQ,CAACO,EAAE,EAAE;IAChB,MAAM,IAAIjB,QAAQ,CAChBC,IAAI,CAACC,SAAS,CAAC;MAAEC,OAAO,EAAE;IAAgC,CAAC,CAAC,EAC5D;MAAEC,MAAM,EAAE;IAAI,CAChB,CAAC;EACH;EACA;EACA,MAAMc,OAAO,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;EACrC,MAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK;;EAE3B;EACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACpC,MAAMG,UAAU,GAAG,IAAIC,IAAI,CAAC,CAAC;EAC7BD,UAAU,CAACE,QAAQ,CAACF,UAAU,CAACG,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAC9CL,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,UAAU,CAACI,KAAK,CAAC;;EAEpD;EACA,OAAO5C,QAAQ,CAAC,GAAG,CAAC;AACtB;AAAC,IAAAS,EAAA;AAAAoC,YAAA,CAAApC,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}